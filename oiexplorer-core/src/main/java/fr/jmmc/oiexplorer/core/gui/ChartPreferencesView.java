/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.oiexplorer.core.gui;

import fr.jmmc.jmcs.data.MimeType;
import fr.jmmc.jmcs.data.preference.PreferencesException;
import fr.jmmc.jmcs.gui.component.FileChooser;
import fr.jmmc.oiexplorer.core.Preferences;
import fr.jmmc.oiexplorer.core.gui.chart.ColorPalette;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Chart Preferences editor
 */
public class ChartPreferencesView extends javax.swing.JPanel implements Observer {

    /** default serial UID for Serializable interface */
    private static final long serialVersionUID = 1;
    /** Logger */
    private static final Logger logger = LoggerFactory.getLogger(ChartPreferencesView.class.getName());
    // Members:
    /** preference singleton */
    private Preferences myPreferences = null;

    /** 
     * Creates new form ChartPreferencesView */
    public ChartPreferencesView() {
        initComponents();
        postInit();
    }

    public void setPreferences(final Preferences myPreferences) {
        this.myPreferences = myPreferences;

        // register this instance as a Preference Observer :
        this.myPreferences.addObserver(this);

        // update GUI
        update(null, null);
    }

    /**
     * This method is useful to set the models and specific features of initialized swing components :
     * Update the combo boxes with their models
     */
    private void postInit() {

        // define custom models :
        this.jComboBoxColorPalette.setModel(new DefaultComboBoxModel(ColorPalette.getColorModelNames()));

        // Custom renderer for LUT:
        this.jComboBoxColorPalette.setRenderer(new IconComboBoxRenderer() {
            private static final long serialVersionUID = 1L;
            @Override
            protected Image getImage(final String name) {
                return ColorPalette.getColorPaletteImage(name);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelChart = new javax.swing.JPanel();
        jLabelBrowser = new javax.swing.JLabel();
        jButtonBrowserSelector = new javax.swing.JButton();
        jComboBoxColorPalette = new javax.swing.JComboBox();
        filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setLayout(new java.awt.GridBagLayout());

        jPanelChart.setBorder(javax.swing.BorderFactory.createTitledBorder("Chart"));
        jPanelChart.setLayout(new java.awt.GridBagLayout());

        jLabelBrowser.setText("Color palette:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanelChart.add(jLabelBrowser, gridBagConstraints);

        jButtonBrowserSelector.setText("Select...");
        jButtonBrowserSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowserSelectorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanelChart.add(jButtonBrowserSelector, gridBagConstraints);

        jComboBoxColorPalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxColorPaletteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanelChart.add(jComboBoxColorPalette, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanelChart, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBrowserSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowserSelectorActionPerformed
        // TODO: choose file ?
        final File palFile = FileChooser.showOpenFileChooser("Load color palette", null, MimeType.PAL, null);
        if (palFile != null) {
            try {
                // check any format error:
                ColorPalette.load(palFile);

                // Update GUI:
                final String palFileName = palFile.getAbsolutePath();
                ColorPalette.setColorPalettes(palFileName);

                this.jComboBoxColorPalette.setModel(new DefaultComboBoxModel(ColorPalette.getColorModelNames()));
                this.jComboBoxColorPalette.setSelectedItem(ColorPalette.getColorPaletteName());

            } catch (IOException ioe) {
                logger.error("Unable to load palette : " + palFile, ioe);
            }
        }
    }//GEN-LAST:event_jButtonBrowserSelectorActionPerformed

    private void jComboBoxColorPaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxColorPaletteActionPerformed
        try {
            // will fire triggerObserversNotification so update() will be called
            this.myPreferences.setPreference(Preferences.CHART_PALETTE, this.jComboBoxColorPalette.getSelectedItem());
        } catch (PreferencesException pe) {
            logger.error("property failure : ", pe);
        }
    }//GEN-LAST:event_jComboBoxColorPaletteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler;
    private javax.swing.JButton jButtonBrowserSelector;
    private javax.swing.JComboBox jComboBoxColorPalette;
    private javax.swing.JLabel jLabelBrowser;
    private javax.swing.JPanel jPanelChart;
    // End of variables declaration//GEN-END:variables

    /**
     * Listen to preferences changes
     * @param o Preferences
     * @param arg unused
     */
    @Override
    public void update(final Observable o, final Object arg) {
        logger.debug("Preferences updated on : {}", this);

        this.jComboBoxColorPalette.setSelectedItem(this.myPreferences.getPreference(Preferences.CHART_PALETTE));
    }
}
