/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.oiexplorer.core.gui;

import fr.jmmc.jmcs.util.ObjectUtils;
import fr.jmmc.oiexplorer.core.model.IdentifiableVersion;
import fr.jmmc.oiexplorer.core.model.OIFitsCollectionManager;
import fr.jmmc.oiexplorer.core.model.OIFitsCollectionManagerEvent;
import fr.jmmc.oiexplorer.core.model.OIFitsCollectionManagerEventListener;
import fr.jmmc.oiexplorer.core.model.OIFitsCollectionManagerEventType;
import fr.jmmc.oiexplorer.core.model.oi.SubsetDefinition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Plot view implementation
 * @author mella
 */
public final class PlotView extends javax.swing.JPanel implements OIFitsCollectionManagerEventListener {

    /** default serial UID for Serializable interface */
    private static final long serialVersionUID = 1;
    /** Class logger */
    private static final Logger logger = LoggerFactory.getLogger(PlotView.class.getName());

    /* members */
    /** OIFitsCollectionManager singleton reference */
    private final OIFitsCollectionManager ocm = OIFitsCollectionManager.getInstance();
    /** related plot identifier */
    private final String plotId;
    /** last version of the subset of the plot */
    private IdentifiableVersion lastSubsetVersion = null;

    /** 
     * Creates new form PlotView 
     * @param plotId plot identifier
     */
    public PlotView(final String plotId) {
        ocm.getPlotChangedEventNotifier().register(this);

        // Build GUI
        initComponents();

        this.plotId = plotId;

        // Finish init
        postInit();
    }

    /**
     * Free any resource or reference to this instance :
     * remove this instance from OIFitsCollectionManager event notifiers
     * dispose also child components
     */
    @Override
    public void dispose() {
        if (logger.isDebugEnabled()) {
            logger.debug("dispose: {}", ObjectUtils.getObjectInfo(this));
        }

        ocm.unbind(this);

        // forward dispose() to child components:
        if (plotChartPanel != null) {
            plotChartPanel.dispose();
        }
        if (plotDefinitionEditor != null) {
            plotDefinitionEditor.dispose();
        }
    }

    /**
     * This method is useful to set the models and specific features of initialized swing components :
     */
    private void postInit() {
        plotChartPanel.setPlotId(plotId);
        plotDefinitionEditor.setPlotId(plotId);
    }

    /**
     * Refresh the HTML view
     * @param subsetDefinition subset definition
     */
    private void updateHtmlView(final SubsetDefinition subsetDefinition) {

        if (logger.isDebugEnabled()) {
            logger.debug("updateHtmlView: lastSubsetVersion {} vs subsetVersion {}", this.lastSubsetVersion,
                    (subsetDefinition != null) ? subsetDefinition.getIdentifiableVersion() : null);
        }

        // compare last version with the subset itself (see IdentifiableVersion.equals):
        if (!ObjectUtils.areEquals(this.lastSubsetVersion, subsetDefinition)) {

            this.lastSubsetVersion = (subsetDefinition != null) ? subsetDefinition.getIdentifiableVersion() : null;
            logger.debug("subsetVersion changed: {}", this.lastSubsetVersion);

            this.oIFitsHtmlPanel.updateOIFits(subsetDefinition.getOIFitsSubset());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPaneViews = new javax.swing.JTabbedPane();
        plotPanel = new javax.swing.JPanel();
        plotChartPanel = new fr.jmmc.oiexplorer.core.gui.PlotChartPanel();
        plotDefinitionEditor = new fr.jmmc.oiexplorer.core.gui.PlotDefinitionEditor();
        oIFitsHtmlPanel = new fr.jmmc.oiexplorer.core.gui.OIFitsHtmlPanel();

        setLayout(new java.awt.BorderLayout());

        jTabbedPaneViews.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        plotPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        plotPanel.add(plotChartPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        plotPanel.add(plotDefinitionEditor, gridBagConstraints);

        jTabbedPaneViews.addTab("plot", plotPanel);
        jTabbedPaneViews.addTab("data", oIFitsHtmlPanel);

        add(jTabbedPaneViews, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPaneViews;
    private fr.jmmc.oiexplorer.core.gui.OIFitsHtmlPanel oIFitsHtmlPanel;
    private fr.jmmc.oiexplorer.core.gui.PlotChartPanel plotChartPanel;
    private fr.jmmc.oiexplorer.core.gui.PlotDefinitionEditor plotDefinitionEditor;
    private javax.swing.JPanel plotPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Return the Plot panel (used by PDF export)
     * @return Plot panel
     */
    public PlotChartPanel getPlotPanel() {
        return plotChartPanel;
    }

    /**
     * Return the related plot identifier
     * @return related plot identifier
     */
    public String getPlotId() {
        return plotId;
    }

    /*
     * OIFitsCollectionManagerEventListener implementation 
     */
    /**
     * Return the optional subject id i.e. related object id that this listener accepts
     * @param type event type
     * @return subject id (null means accept any event) or DISCARDED_SUBJECT_ID to discard event
     */
    @Override
    public String getSubjectId(final OIFitsCollectionManagerEventType type) {
        switch (type) {
            case PLOT_CHANGED:
                return plotId;
            default:
        }
        return DISCARDED_SUBJECT_ID;
    }

    /**
     * Handle the given OIFits collection event
     * @param event OIFits collection event
     */
    @Override
    public void onProcess(final OIFitsCollectionManagerEvent event) {
        logger.debug("onProcess {}", event);

        switch (event.getType()) {
            case PLOT_CHANGED:
                updateHtmlView(event.getPlot().getSubsetDefinition());
                break;
            default:
        }
        logger.debug("onProcess {} - done", event);
    }
}
