/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.oiexplorer.gui;

import fr.jmmc.jmcs.gui.component.GenericListModel;
import fr.jmmc.oiexplorer.core.model.TargetUID;
import fr.jmmc.oitools.meta.ColumnMeta;
import fr.jmmc.oitools.model.OIFitsFile;
import fr.jmmc.oitools.model.OITable;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mella
 */
public class PlotSelectorPanel extends javax.swing.JPanel {

    private final static Logger logger = LoggerFactory.getLogger(PlotSelectorPanel.class);
    
    /* members */
    private final List<String> xAxisChoices = new LinkedList<String>();
    private GenericListModel<String> xAxisListModel = new GenericListModel<String>(xAxisChoices, true);
    private final List<String> yAxisChoices = new LinkedList<String>();
    private GenericListModel<String> yAxisListModel = new GenericListModel<String>(yAxisChoices, true);
    private TargetUID target = null;
    private OIFitsFile oiFitsFile = null;

    /** Creates new form PlotSelectorPanel */
    public PlotSelectorPanel() {
        initComponents();
        xAxisComboBox.setModel(xAxisListModel);
        yAxisComboBox.setModel(yAxisListModel);
    }

    /**
     * Update panel with the given OIFits structure
     * @param oiFitsFile OIFits structure
     */
    public void updateOIFits(final TargetUID target, final OIFitsFile oiFitsFile) {
        // if inputs are valid
        if (target != null && oiFitsFile != null) {

            this.target = target;
            this.oiFitsFile = oiFitsFile;

            logger.debug("updateOIFits() fill combo for '{}' target ", target);
            
            final Set<String> columns = getDistinctColumns(oiFitsFile);

            // Clear all content
            xAxisChoices.clear();
            yAxisChoices.clear();

            xAxisChoices.addAll(columns);
            yAxisChoices.addAll(columns);
            xAxisComboBox.setSelectedIndex(0);
            yAxisComboBox.setSelectedIndex(0);
        }
    }

    private Set<String> getDistinctColumns(final OIFitsFile oiFitsFile) {
        final Set<String> columns = new LinkedHashSet<String>();

        // Add every column of every tables for given target into combomodel sets
        for (OITable oiTable : oiFitsFile.getOiVis2()) {
            oiTable.getNumericalColumnsNames(columns);
        }
        for (OITable oiTable : oiFitsFile.getOiVis()) {
            oiTable.getNumericalColumnsNames(columns);
        }
        for (OITable oiTable : oiFitsFile.getOiT3()) {
            oiTable.getNumericalColumnsNames(columns);
        }
        return columns;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        yLabel1 = new javax.swing.JLabel();
        yAxisComboBox = new javax.swing.JComboBox();
        xLabel = new javax.swing.JLabel();
        xAxisComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        yLabel1.setText("yAxis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(yLabel1, gridBagConstraints);

        yAxisComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(yAxisComboBox, gridBagConstraints);

        xLabel.setText("xAxis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(xLabel, gridBagConstraints);

        xAxisComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        xAxisComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xAxisComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(xAxisComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void xAxisComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xAxisComboBoxActionPerformed
        if (target != null && oiFitsFile != null) {

            final boolean doDump = false;
            
            if (doDump) {
                final String selectedColumn = (String) xAxisComboBox.getSelectedItem();
                logger.warn("xAxisComboBoxActionPerformed: Dump of column {}:", selectedColumn);

                ColumnMeta meta;
                // Add every column of every tables for given target into combomodel sets
                for (OITable oiTable : oiFitsFile.getOiTables()) {
                    meta = oiTable.getColumnMeta(selectedColumn);

                    logger.warn("Meta : {}", meta);

                    if (meta != null) {
                        if (meta.isArray()) {
                            double[][] values = oiTable.getColumnAsDoubles(selectedColumn);
                            logger.warn("Dump of table {} : {}", oiTable, Arrays.deepToString(values));
                        } else {
                            double[] value = oiTable.getColumnAsDouble(selectedColumn);
                            logger.warn("Dump of table {} : {}", oiTable, Arrays.toString(value));
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_xAxisComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox xAxisComboBox;
    private javax.swing.JLabel xLabel;
    private javax.swing.JComboBox yAxisComboBox;
    private javax.swing.JLabel yLabel1;
    // End of variables declaration//GEN-END:variables
}
