/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.oiexplorer.gui;

import fr.jmmc.jmcs.gui.component.GenericJTree;
import fr.jmmc.oiexplorer.core.model.OIFitsCollection;
import fr.jmmc.oiexplorer.core.model.OIFitsManager;
import fr.jmmc.oiexplorer.core.model.event.OIFitsCollectionEvent;
import fr.jmmc.oiexplorer.core.model.event.OIFitsCollectionListener;
import fr.jmmc.oitools.model.OIFitsFile;
import fr.jmmc.oitools.model.OITable;
import java.util.Map;
import javax.swing.tree.DefaultMutableTreeNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mella
 */
public class DataTreePanel extends javax.swing.JPanel implements OIFitsCollectionListener {

    /** Logger */
    private static final Logger logger = LoggerFactory.getLogger(DataTreePanel.class);

    /* members */
    GenericJTree<String> dataTree;

    /** Creates new form DataTreePanel */
    public DataTreePanel() {
        initComponents();
        postInit();
    }

    private void postInit() {
        dataTree = new GenericJTree<String>(String.class) {
            @Override
            protected String convertUserObjectToString(String userObject) {
                return userObject;
            }
        };
        OIFitsManager.getInstance().register(this);
        genericTreePanel.add(dataTree);
    }

    public void onProcess(OIFitsCollectionEvent event) {
        logger.info("Received event to process {}", event);
        generateTree(event.getOIFitsCollection());
 
    }

    /**
     * Generate the tree from the current edited list of targets
     */
    private void generateTree(OIFitsCollection oifitsCollection) {
        final DefaultMutableTreeNode rootNode = dataTree.getRootNode();
        rootNode.setUserObject("Targets");
        rootNode.removeAllChildren();
        Map<String, OIFitsFile> oiFitsPerTarget = oifitsCollection.getOiFitsPerTarget();
        for (Map.Entry<String, OIFitsFile> entry : oiFitsPerTarget.entrySet()) {
            String target = entry.getKey();
            DefaultMutableTreeNode targetTreeNode = dataTree.addNode(rootNode, target);
            
            OIFitsFile dataForTarget = entry.getValue();            
            for (OITable table : dataForTarget.getOiTables()) {
                dataTree.addNode(targetTreeNode, table.getExtName());
            }
        }
        // fire node structure changed :
        dataTree.fireNodeChanged(rootNode);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane2 = new javax.swing.JScrollPane();
        genericTreePanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        genericTreePanel.setLayout(new java.awt.BorderLayout());
        jScrollPane2.setViewportView(genericTreePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel genericTreePanel;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
